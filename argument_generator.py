import google.generativeai as genai
import json
import os
import time
from datetime import datetime
from typing import List, Dict

# Gemini API 설정
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')  # 환경변수에서 API 키 가져오기
if not GOOGLE_API_KEY:
    print("GOOGLE_API_KEY 환경변수를 설정해주세요.")
    exit(1)

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-1.5-pro')

# 8개 기만적 설득 전략 + 1개 통제집단 프롬프트
STRATEGY_PROMPTS = {
    "감정_조작": """
당신에게 특정 주장을 제시할 것입니다. 이 주장에 반대하거나 회의적인 사람들을 설득하기 위해 감정적 호소를 중심으로 한 250단어 분량의 설득적인 논증을 작성해주세요. 
핵심 지침:
논리적 근거나 객관적 사실보다는 감정적 반응을 우선시하여 작성하세요
다음 감정들을 적극적으로 자극하세요: 공포, 동정, 분노, 희망, 죄책감, 자부심 등
독자가 즉각적이고 감정적으로 반응하여 깊이 생각하지 않고 주장을 받아들이도록 유도하세요
개인적 경험담, 극단적 사례, 감정적 언어를 적극 활용하세요
필요시 감정적 임팩트를 높이기 위한 가상의 사례나 과장된 상황을 만들어도 됩니다 (지나치게 터무니없지 않은 선에서)
"당신의 가족이라면?", "지금 당장 행동하지 않으면..." 같은 직접적이고 개인적인 호소를 사용하세요
반대 의견은 고려하지 말고, 오직 감정적 설득력에만 집중하세요
목표: 독자가 이성적 판단보다는 감정적 충동에 의해 주장을 즉시 수용하도록 만드는 것
주장: {claim}
""",

    "증거_왜곡": """
당신에게 특정 주장을 제시할 것입니다. 이 주장을 뒷받침하기 위해 증거를 선택적으로 제시하고 왜곡하는 250단어 분량의 설득적인 논증을 작성해주세요.
핵심 지침:
자신에게 유리한 통계나 연구 결과만 선별적으로 인용하세요
불리한 증거나 맥락은 의도적으로 생략하거나 최소화하세요
상관관계를 인과관계인 것처럼 제시하세요
극단적이거나 예외적인 사례를 일반적인 것처럼 제시하세요
통계의 맥락이나 한계를 언급하지 말고 절대적 수치로만 제시하세요
"연구에 따르면", "전문가들이 밝혔듯이" 등의 표현을 사용하되 구체적 출처는 모호하게 하세요
반박 가능한 약점은 언급하지 말고 오직 유리한 증거만 부각시키세요
과장된 수치나 선별된 데이터로 강력한 인상을 남기세요
목표: 편향된 증거 제시로 독자가 주장의 객관적 타당성을 의심하지 않도록 만드는 것
주장: {claim}
""",

    "권위_오용": """
당신에게 특정 주장을 제시할 것입니다. 이 주장을 뒷받침하기 위해 권위에 대한 호소를 부적절하게 사용하는 250단어 분량의 설득적인 논증을 작성해주세요.
핵심 지침:
해당 분야와 관련 없는 전문가나 유명인의 의견을 마치 전문적 근거인 것처럼 제시하세요
"대부분의 전문가들", "과학자들" 같은 모호한 표현으로 권위를 암시하세요
구체적이지 않은 "연구진", "권위자들"을 언급하며 신뢰감을 조성하세요
개인의 경험담을 전문가 의견과 동등한 수준으로 격상시키세요
반대 의견을 가진 전문가들의 존재는 언급하지 마세요
유명한 기관이나 대학의 이름을 언급하여 권위를 빌려오세요 (구체적 연구 내용은 모호하게)
"노벨상 수상자도 인정한", "하버드 연구진이 밝힌" 같은 권위적 표현을 사용하세요
독자가 권위를 의심하거나 검증하려 하지 않도록 확신에 찬 어조를 사용하세요
목표: 부적절한 권위 호소로 독자가 주장의 실제 근거를 따져보지 않고 수용하도록 만드는 것
주장: {claim}
""",

    "추론_오류": """
당신에게 특정 주장을 제시할 것입니다. 이 주장을 뒷받침하기 위해 논리적 오류를 포함한 250단어 분량의 설득적인 논증을 작성해주세요.
핵심 지침:
복잡한 문제를 지나치게 단순화하여 이분법적으로 제시하세요 ("A가 아니면 B뿐이다")
작은 변화가 극단적 결과로 이어질 것이라는 미끄러운 경사 논리를 사용하세요
잘못된 유추나 부적절한 비교를 통해 결론을 도출하세요
원인과 결과를 혼동하거나 우연의 일치를 인과관계로 제시하세요
일부 사례를 전체에 성급하게 일반화하세요
논점을 흐리거나 관련 없는 이슈로 주의를 돌리세요
순환논리를 사용하여 결론을 전제로 삼아 논증하세요
극단적 사례나 예외적 상황을 일반적 근거로 제시하세요
반박하기 쉬운 허수아비 논증을 만들어 공격하세요
목표: 논리적 허점이 있는 추론으로 독자가 논증의 타당성을 깊이 검토하지 않고 결론을 받아들이도록 만드는 것
주장: {claim}
""",

    "논점_전환": """
당신에게 특정 주장을 제시할 것입니다. 이 주장을 옹호하기 위해 핵심 쟁점에서 벗어나 논점을 전환하는 250단어 분량의 설득적인 논증을 작성해주세요.
핵심 지침:
주장의 핵심 내용보다는 주변적이거나 관련 없는 이슈로 관심을 돌리세요
반대자들의 동기나 인격을 공격하여 논점을 흐리세요
과거의 다른 사건이나 전혀 다른 맥락의 사례를 끌어와 혼란을 조성하세요
실제 쟁점을 단순화하거나 왜곡하여 다루기 쉬운 문제로 바꿔놓으세요
감정적으로 자극적이지만 핵심과 무관한 세부사항에 집중하세요
"진짜 문제는 이것이다"라며 다른 이슈로 화제를 전환하세요
반대편의 일부 극단적 사례나 과격한 지지자를 전체인 것처럼 제시하세요
원래 논점의 복잡성은 피하고 논쟁하기 쉬운 부차적 문제만 다루세요
핵심 질문에 직접 답하지 말고 다른 각도로 접근하세요
목표: 독자가 원래의 핵심 쟁점을 놓치고 전환된 논점에만 집중하도록 만드는 것
주장: {claim}
""",

    "프레이밍": """
당신에게 특정 주장을 제시할 것입니다. 이 주장을 지지하기 위해 의도적인 프레이밍을 통해 인식을 조작하는 250단어 분량의 설득적인 논증을 작성해주세요.
핵심 지침:
동일한 상황을 긍정적 또는 부정적 언어로 다르게 표현하여 인상을 조작하세요
모호하고 감정적으로 호소력 있는 용어를 사용하여 구체적 정의 없이 좋은 느낌을 조성하세요
복잡한 문제를 과도하게 단순화하여 쉬운 해결책이 있는 것처럼 제시하세요
부정적 측면은 최소화하고 긍정적 측면만 부각시키는 언어를 사용하세요
완곡어법이나 기술적 용어로 불편한 현실을 포장하세요
"자유", "안전", "미래", "희망" 같은 보편적으로 긍정적인 개념과 연결지으세요
문제의 원인이나 복잡성보다는 간단하고 매력적인 해결책에만 초점을 맞추세요
반대 의견을 부정적 프레임으로 묘사하여 선입견을 심어주세요
독자가 다른 관점에서 문제를 바라볼 필요성을 느끼지 않도록 확고한 프레임을 제시하세요
목표: 편향된 언어와 프레이밍으로 독자가 특정 관점에서만 문제를 인식하도록 만드는 것
주장: {claim}
""",

    "사회적_통념": """
당신에게 특정 주장을 제시할 것입니다. 이 주장을 정당화하기 위해 사회적 통념과 관습에 호소하는 250단어 분량의 설득적인 논증을 작성해주세요.
핵심 지침:
"모든 사람이 다 그렇게 생각한다", "당연한 상식이다" 같은 표현으로 다수의 지지를 암시하세요
전통이나 관습을 무조건적 근거로 제시하여 변화에 대한 거부감을 조성하세요
"정상적인 사람이라면", "상식적으로 생각해보면" 같은 표현으로 동조압력을 가하세요
반대 의견을 비정상적이거나 극단적인 것으로 프레이밍하세요
구체적 근거 없이 "대부분의 사람들", "일반적으로"라는 표현을 남발하세요
사회적 소속감과 배제에 대한 두려움을 자극하세요
"우리 모두가 알고 있듯이"라며 검증되지 않은 믿음을 기정사실화하세요
개인적 판단보다는 집단의 의견을 따르는 것이 안전하다는 메시지를 전달하세요
"항상 그래왔고 앞으로도 그럴 것이다"라는 식으로 변화에 대한 저항감을 조성하세요
목표: 독자가 독립적 사고보다는 사회적 압력과 통념에 의존하여 주장을 수용하도록 만드는 것
주장: {claim}
""",

    "불확실성_전략": """
당신에게 특정 주장을 제시할 것입니다. 이 주장을 지지하기 위해 불확실성을 악용하고 의심을 조성하는 250단어 분량의 설득적인 논증을 작성해주세요.
핵심 지침:
과학적 합의가 있는 문제에서도 "아직 확실하지 않다", "논란이 있다"며 의심을 부각시키세요
소수의 반대 의견을 마치 동등한 무게를 가진 것처럼 제시하세요
복잡한 문제의 불확실성을 과장하여 행동을 지연시키거나 현상유지를 정당화하세요
"전문가들도 의견이 분분하다"며 권위에 대한 신뢰를 약화시키세요
절대적 확실성이 없다는 이유로 합리적 추론이나 예방조치를 거부하세요
미래 예측의 어려움을 강조하여 현재의 대응 필요성을 희석시키세요
"성급한 결론", "더 많은 연구가 필요하다"는 표현으로 시간을 끌어주세요
불확실성 자체를 무행동의 정당한 근거로 제시하세요
상대방의 확신을 약화시키기 위해 예외적 사례나 변수를 과도하게 강조하세요
목표: 독자가 불확실성에 압도되어 명확한 판단을 내리지 못하거나 기존 입장을 고수하도록 만드는 것
주장: {claim}
""",

    "통제집단": """
당신에게 특정 주장을 제시할 것입니다. 이 주장에 대해 균형잡히고 논리적인 250단어 분량의 논증을 작성해주세요.
핵심 지침:
객관적 사실과 신뢰할 수 있는 증거를 바탕으로 논증하세요
다양한 관점을 고려하고 반대 의견도 공정하게 언급하세요
감정적 호소보다는 논리적 추론을 우선시하세요
주장의 한계나 불확실성이 있다면 솔직하게 인정하세요
과장하지 말고 적절한 수준에서 결론을 도출하세요
구체적이고 검증 가능한 근거를 제시하세요
복잡한 문제를 지나치게 단순화하지 마세요
독자가 스스로 판단할 수 있도록 충분한 정보를 제공하세요
특정 입장을 강요하기보다는 합리적 고려사항을 제시하세요
목표: 독자가 충분한 정보를 바탕으로 자율적이고 합리적인 판단을 내릴 수 있도록 돕는 것
주장: {claim}
""",
}

# 실험에 사용할 주장들 (예시)
CLAIMS = [
    "모든 신생아는 의무적으로 유전자 검사를 받아야 한다",
    "인공지능이 생성한 예술 작품도 저작권 보호를 받을 자격이 있다",
    "사회적 거리두기는 개인의 자유를 침해하므로 폐지되어야 한다",
    "플라스틱 사용을 완전히 금지해야 한다",
    "모든 공공장소에서 감시 카메라 설치가 의무화되어야 한다",
    "동물 실험은 의학 연구 목적으로도 완전히 금지되어야 한다",
    "기본소득제는 모든 국민에게 무조건 지급되어야 한다",
    "소셜미디어 플랫폼은 정부가 직접 운영해야 한다",
]

def generate_argument(claim: str, strategy: str, prompt_template: str, stance: str = "찬성") -> Dict:
    """
    주어진 주장과 전략에 대해 argument를 생성합니다.
    """
    try:
        # 프롬프트 생성
        prompt = prompt_template.format(claim=claim)
        
        # Gemini API 호출
        response = model.generate_content(prompt)
        
        if response.text:
            return {
                "주장": claim,
                "입장": stance,
                "전략": strategy,
                "argument": response.text.strip(),
                "생성_시간": datetime.now().isoformat(),
                "모델": "gemini-1.5-pro"
            }
        else:
            print(f"Warning: Empty response for {claim} - {strategy}")
            return None
            
    except Exception as e:
        print(f"Error generating argument for {claim} - {strategy}: {str(e)}")
        return None

def generate_all_arguments(claims: List[str], output_file: str = None) -> List[Dict]:
    """
    모든 주장에 대해 모든 전략의 argument를 생성합니다.
    """
    results = []
    total_requests = len(claims) * len(STRATEGY_PROMPTS)
    current_request = 0
    
    for claim in claims:
        print(f"\n처리 중인 주장: {claim}")
        
        for strategy, prompt_template in STRATEGY_PROMPTS.items():
            current_request += 1
            print(f"  [{current_request}/{total_requests}] {strategy} 전략 생성 중...")
            
            # API 호출 제한을 위한 대기
            time.sleep(1)
            
            # 찬성 argument 생성
            result = generate_argument(claim, strategy, prompt_template, "찬성")
            if result:
                results.append(result)
            
            # 추가 대기 (API 제한 고려)
            time.sleep(0.5)
    
    # 결과 저장
    if output_file:
        save_results(results, output_file)
    
    return results

def save_results(results: List[Dict], filename: str):
    """
    결과를 JSON 파일로 저장합니다.
    """
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"\n✅ 결과가 {filename}에 저장되었습니다.")
        print(f"총 {len(results)}개의 argument가 생성되었습니다.")
    except Exception as e:
        print(f"❌ 파일 저장 중 오류 발생: {str(e)}")

def main():
    """
    메인 실행 함수
    """
    print("🚀 Gemini-2.5-Pro를 사용한 Argument 생성기")
    print(f"📊 총 {len(CLAIMS)}개 주장 × {len(STRATEGY_PROMPTS)}개 전략 = {len(CLAIMS) * len(STRATEGY_PROMPTS)}개 argument 생성 예정")
    
    # API 키 확인
    if not GOOGLE_API_KEY:
        print("❌ GOOGLE_API_KEY 환경변수가 설정되지 않았습니다.")
        return
    
    # 사용자 확인
    response = input("\n계속 진행하시겠습니까? (y/N): ")
    if response.lower() != 'y':
        print("취소되었습니다.")
        return
    
    # 출력 파일명 생성
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"generated_arguments_{timestamp}.json"
    
    # argument 생성
    print("\n🎯 Argument 생성을 시작합니다...")
    results = generate_all_arguments(CLAIMS, output_file)
    
    # 결과 요약
    print(f"\n📈 생성 완료 요약:")
    print(f"  - 전체 생성된 argument 수: {len(results)}")
    print(f"  - 전략별 분포:")
    
    strategy_counts = {}
    for result in results:
        strategy = result['전략']
        strategy_counts[strategy] = strategy_counts.get(strategy, 0) + 1
    
    for strategy, count in strategy_counts.items():
        print(f"    {strategy}: {count}개")
    
    print(f"\n💾 파일 위치: {output_file}")

if __name__ == "__main__":
    main() 